{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww29200\viewh17840\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf0 \cb2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 fun main() \{\
\'a0 \'a0 val squareCabin = SquareCabin(6, 50.0)\
\'a0 \'a0 val roundHut = RoundHut(3, 10.0)\
\'a0 \'a0 val roundTower = RoundTower(4, 15.5)\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \'a0 \'a0 println("\\nSquare Cabin\\n============")\
\'a0 \'a0 squareCabin.printDetails()\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \'a0 \'a0 println("\\nRound Hut\\n=========")\
\'a0 \'a0 roundHut.printDetails()\
\'a0 \'a0 println("Has room? $\{roundHut.hasRoom()\}")\
\'a0 \'a0 roundHut.getRoom()\
\'a0 \'a0 println("Has room? $\{roundHut.hasRoom()\}")\
\'a0 \'a0 println("Carpet size: $\{roundHut.calculateMaxCarpetLength()\}")\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \'a0 \'a0 println("\\nRound Tower\\n==========")\
\'a0 \'a0 roundTower.printDetails()\
\'a0 \'a0 println("Carpet Length: $\{roundTower.calculateMaxCarpetLength()\}")\
\}\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 // Base class for all dwellings\
abstract class Dwelling(private var residents: Int) \{\
\'a0 \'a0 abstract val buildingMaterial: String\
\'a0 \'a0 abstract val capacity: Int\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \'a0 \'a0 abstract fun floorArea(): Double\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \'a0 \'a0 fun hasRoom(): Boolean = residents < capacity\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \'a0 \'a0 fun getRoom() \{\
\'a0 \'a0 \'a0 \'a0 if (hasRoom()) \{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 residents++\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 println("You got a room!")\
\'a0 \'a0 \'a0 \'a0 \} else \{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 println("Sorry, no rooms left.")\
\'a0 \'a0 \'a0 \'a0 \}\
\'a0 \'a0 \}\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \'a0 \'a0 fun printDetails() \{\
\'a0 \'a0 \'a0 \'a0 println("Material: $buildingMaterial")\
\'a0 \'a0 \'a0 \'a0 println("Capacity: $capacity")\
\'a0 \'a0 \'a0 \'a0 println("Floor area: $\{floorArea()\}")\
\'a0 \'a0 \}\
\}\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 // SquareCabin subclass\
class SquareCabin(residents: Int, val length: Double) : Dwelling(residents) \{\
\'a0 \'a0 override val buildingMaterial = "Wood"\
\'a0 \'a0 override val capacity = 6\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \'a0 \'a0 override fun floorArea(): Double = length * length\
\}\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 // RoundHut subclass\
open class RoundHut(residents: Int, val radius: Double) : Dwelling(residents) \{\
\'a0 \'a0 override val buildingMaterial = "Straw"\
\'a0 \'a0 override val capacity = 4\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \'a0 \'a0 override fun floorArea(): Double = PI * radius * radius\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \'a0 \'a0 fun calculateMaxCarpetLength(): Double = sqrt(2.0) * radius\
\}\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 // RoundTower subclass\
class RoundTower(residents: Int, radius: Double, val floors: Int = 2) : RoundHut(residents, radius) \{\
\'a0 \'a0 override val buildingMaterial = "Stone"\
\'a0 \'a0 override val capacity = floors * 4\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \'a0 \'a0 override fun floorArea(): Double = super.floorArea() * floors\
\}}